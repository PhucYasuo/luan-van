<!DOCTYPE html>
<html lang="vi">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Giáo viên</title>
	<link rel="stylesheet" href="/css/styles.css">
</head>
<body>
	<%- include('../navbar') %>
	<div class="department-filter">
		<% tobomons.forEach(tobomon => {%>
			<button value="<%= tobomon.TBM_Ma %>" onclick="filterDepartment(this)"><%= tobomon.TBM_Ten %></button>
		<% }) %>
		<button value="" onclick="filterDepartment(this)">Tất cả</button>
	</div>
	<div class="table-container">
		<h2>Danh sách Giáo Viên</h2>
		<div class="top-bar">
			<button class="add-btn" onclick="openModalCreate()">Thêm giáo viên</button>
			<div class="search">
				<input type="text" id="searchInput" name="search" placeholder="Tìm kiếm theo tên hoặc mã giáo viên">
				<button type="button" id="searchButton">Tìm kiếm</button>
			</div>
		</div>
				
		<table border="1">
		<thead>
			<tr>
			<th>Mã</th>
			<th>Tên</th>
			<th>Ngày sinh</th>
			<th>Giới tính</th>
			<th>SĐT</th>
			<th>Mail</th>
			<th>Địa chỉ</th>
			<th>Tổ bộ môn</th>
			<th>Hành động</th>
			</tr>
		</thead>
		<tbody id="tableBody">
			<% giaoviens.forEach(giaovien => { %>
				<tr data-mabm="<%= giaovien.TBM_Ma %>">
					<td><%= giaovien.GV_Ma %></td>
					<td><%= giaovien.GV_HoTen %></td>
					<td><%= giaovien.GV_NgaySinh %></td>
					<td><%= giaovien.GV_GioiTinh == 0 ? 'Nam' : 'Nữ' %></td>
					<td><%= giaovien.GV_SoDT %></td>
					<td><%= giaovien.GV_Mail %></td>
					<td><%= giaovien.GV_DiaChi %></td>
					<td><%= tobomons.find(tb => tb.TBM_Ma === giaovien.TBM_Ma)?.TBM_Ten || 'Không rõ' %></td>	
					<td>
						<div class="action-buttons">
							<button class="update-btn" onclick="openModalEdit('<%= giaovien.GV_Ma %>', '<%= giaovien.GV_HoTen %>', '<%= giaovien.GV_NgaySinh %>', '<%= giaovien.GV_GioiTinh %>', '<%= giaovien.GV_SoDT %>', '<%= giaovien.GV_Mail %>', '<%= giaovien.GV_DiaChi %>', '<%= giaovien.TBM_Ma %>')">Sửa</button>
							<button class="delete-btn" onclick="deleteObject('<%= giaovien.GV_Ma %>')" >Xoá</button>
						</div>
					</td>
				</tr>
			<% }) %>
		</tbody>
		</table>
	</div>

	<div id="pop-up-modal" class="modal">
		<div class="modal-content">
		<span class="close-btn" onclick="closeModal()">×</span>
		<h2>Chỉnh sửa giáo viên</h2>
		<form id="pop-up-form">
			<div class="form-column">
				<label for="ma">Mã giáo viên:</label>
				<input type="text" id="ma" name="GV_Ma" readonly>
				<label for="ten">Tên giáo viên:</label>
				<input type="text" id="ten" name="GV_HoTen" required>
				<label for="ngaysinh">Ngày sinh:</label>
				<input type="date" id="ngaysinh" name="GV_NgaySinh" required>
				<label for="gioitinh">Giới tính:</label>
				<select id="gioitinh" name="GV_GioiTinh" required>
					<option value="0">Nam</option>
					<option value="1">Nữ</option>
				</select>
			</div>
			<div class="form-column">
				<label for="sdt">SĐT:</label>
				<input type="text" id="sdt" name="GV_SoDT" required>
				<label for="mail">Mail:</label>
				<input type="email" id="mail" name="GV_Mail" required>
				<label for="diachi">Địa chỉ:</label>
				<input type="text" id="diachi" name="GV_DiaChi" required>
				<label for="tbm">Tổ bộ môn:</label>
				<select id="tbm" name="TBM_Ma">
					<% tobomons.forEach(tobomon => { %>
						<option value="<%= tobomon.TBM_Ma %>"><%= tobomon.TBM_Ten %></option>
					<% }) %>
				</select>
			</div>
			<div style="width: 100%; margin-top: 10px;">
				<button id="submitBtn" type="submit">Lưu</button>
				<button type="button" onclick="closeModal()">Hủy</button>
			</div>
		</form>
		</div>
	</div>

	<script>
		function openModalEdit(ma, ten, ngaysinh, gioitinh, soDT, mail, diachi, tbm) {
			const modal = document.getElementById('pop-up-modal');
			const form = document.getElementById('pop-up-form');
			const submitBtn = document.getElementById('submitBtn');
			submitBtn.onclick = async (event) => {
				event.preventDefault();
				await submitEditForm(form);
			};
			
			if (!modal || !form) {
				console.error('Modal or form not found');
				return;
			}
			form.action = `/giao-vien/${ma}`;
			form.method = 'PUT';
			form.reset();
			form.querySelector('#ma').value = ma;
			form.querySelector('#ten').value = ten;
			form.querySelector('#ngaysinh').value = ngaysinh;
			form.querySelector('#gioitinh').value = gioitinh;
			form.querySelector('#sdt').value = soDT;
			form.querySelector('#mail').value = mail;
			form.querySelector('#diachi').value = diachi;
			form.querySelector('#tbm').value = tbm;
			modal.style.display = 'flex';
			modal.classList.add('show');
		}

		async function submitEditForm(form) {
			if (!form) {
				console.error('Form not found');
				return;
			}

			const formData = new FormData(form);
			const data = Object.fromEntries(formData);
			
			try {
				const response = await fetch(form.action, {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				});

				if (!response.ok) {
					throw new Error('Lỗi khi cập nhật');
				}

				const result = await response.json();
				if (response.ok && result.message === 'Cập nhật giáo viên thành công') {
					console.log('Cập nhật thành công:', result);
					alert('Cập nhật thành công!');
					closeModal();
					window.location.reload();
				}
				
				
			} catch (error) {
				console.error('Error:', error);
				alert('Đã có lỗi xảy ra!');
			}
		}

		async function openModalCreate() {
			const modal = document.getElementById('pop-up-modal');
			const form = document.getElementById('pop-up-form');
			const submitBtn = document.getElementById('submitBtn');
			submitBtn.onclick = async (event) => {
				event.preventDefault();
				await submitCreateForm(form);
			};

			if (!modal || !form) {
				console.error('Modal or form not found');
				return;
			}
			const newGVID = await getNewGVID();
			console.log('New GVID:', newGVID);
			form.action = '/giao-vien';
			form.method = 'POST';
			form.reset(); 
			form.querySelector('#ma').value = newGVID;
			modal.style.display = 'flex';
			modal.classList.add('show');
		}

		async function getNewGVID() {
			try{
				const response = await fetch('/giao-vien-new-id', {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json'
					}
				});
				const newGVID = await response.json();
				console.log(newGVID);
				return newGVID;
			}
			catch (error) {
				console.error('Error fetching new GVID:', error);
				return null;
			}
		}

		async function submitCreateForm(form) {
			if (!form) {
				console.error('Form not found');
				return;
			}

			const formData = new FormData(form);
			const data = Object.fromEntries(formData);

			try {
				const response = await fetch(form.action, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				});

				if (!response.ok) {
					throw new Error('Lỗi khi tạo mới');
				}

				const result = await response.json();
				if (response.ok && result.message === 'Thêm giáo viên thành công') {
					console.log('Thêm thành công:', result);
					alert('Thêm thành công!');
					closeModal();
					window.location.reload();
				}
				
			} catch (error) {
				console.error('Error:', error);
				alert('Đã có lỗi xảy ra!');
			}
		}

		function closeModal() {
			const modal = document.getElementById('pop-up-modal');
			if (modal) {
				modal.classList.remove('show');
				setTimeout(() => {
					modal.style.display = 'none';
				}, 300);
			}
		}

		document.getElementById('pop-up-modal').onclick = function(event) {
			if (event.target === this) {
				closeModal();
			}
		};

		async function deleteObject(ma) {
			if (confirm('Bạn có chắc chắn muốn xóa giáo viên này?')) {
				try {
					const response = await fetch('/giao-vien/${ma}', {
						method: 'DELETE',
						headers: {'Content-Type': 'application/json'},
						body: JSON.stringify({ GV_Ma: ma })
					});

					if (!response.ok) {
						throw new Error('Lỗi khi xoá');
					}

					const result = await response.json();
					if (response.ok && result.message === 'Xoá giáo viên thành công') {
						console.log('Xoá thành công:', result);
						alert('Xoá thành công!');
						window.location.reload();
					}
					
				} catch (error) {
					console.error('Error:', error);
					alert('Đã có lỗi xảy ra!');
				}
			}
		}

		document.getElementById('searchButton').addEventListener('click', function () {
			const keyword = document.getElementById('searchInput').value.toLowerCase();
			const rows = document.querySelectorAll('#tableBody tr');

			rows.forEach(row => {
				const ma = row.cells[0].textContent.toLowerCase();
				const ten = row.cells[1].textContent.toLowerCase();
				if (ma.includes(keyword) || ten.includes(keyword)) {
					row.style.display = '';
				} else {
					row.style.display = 'none';
				}
			});
		});

		function filterDepartment(button) {
			const selectedTBM = button.value;
			const rows = document.querySelectorAll('#tableBody tr');
			console.log('Selected TBM:', selectedTBM);

			rows.forEach(row => {
				const rowMaBM = row.getAttribute('data-mabm');
				console.log('Row TBM:', rowMaBM);
				if (rowMaBM === selectedTBM || selectedTBM === '') {
					row.style.display = '';
				} else {
					row.style.display = 'none';
				}
			});
		}

	</script>
</body>
</html>