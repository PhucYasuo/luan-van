<!DOCTYPE html>
<html lang="vi">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Giáo viên</title>
	<style>
		/* Reset cơ bản */
		* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
		font-family: Arial, sans-serif;
		}

		/* Table container */
		.table-container {
		max-width: 1200px;
		margin: 30px auto;
		padding: 0 15px;
		}

		/* Table */
		table {
		width: 100%;
		border-collapse: collapse;
		background-color: #fff;
		box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
		}
		th, td {
		border: 1px solid #e0e0e0;
		padding: 12px 15px;
		text-align: left;
		}
		th {
		background-color: #f5f5f5;
		font-weight: 600;
		color: #333;
		text-transform: uppercase;
		font-size: 14px;
		}
		td {
		color: #555;
		font-size: 14px;
		}
		tr:nth-child(even) {
		background-color: #fafafa;
		}
		tr:hover {
		background-color: #f0f0f0;
		}

		/* Buttons and links */
		button, a {
		display: inline-block;
		padding: 8px 16px;
		text-decoration: none;
		color: white;
		background-color: #007bff;
		border-radius: 4px;
		border: none;
		cursor: pointer;
		font-size: 14px;
		transition: background-color 0.3s, transform 0.1s;
		}
		button:hover, a:hover {
		background-color: #edf0f4;
		transform: translateY(-1px);
		}
		a[href*="/delete"] {
		background-color: #dc3545;
		}
		a[href*="/delete"]:hover {
		background-color: #b02a37;
		}
		.add-btn {
		background-color: #28a745;
		margin-bottom: 20px;
		padding: 10px 20px;
		}
		.add-btn a {
		color: white;
		text-decoration: none;
		}
		.add-btn:hover {
		background-color: #218838;
		}

		/* Modal */
		.modal {
		display: none;
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background-color: rgba(0, 0, 0, 0.6);
		justify-content: center;
		align-items: center;
		z-index: 1000;
		opacity: 0;
		transition: opacity 0.3s ease;
		}
		.modal.show {
		opacity: 1;
		}
		.modal-content {
		background-color: #fff;
		padding: 20px;
		border-radius: 8px;
		width: 100%;
		max-width: 600px;
		box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
		transform: translateY(-50px);
		transition: transform 0.3s ease;
		}
		.modal.show .modal-content {
		transform: translateY(0);
		}
		.modal-content h2 {
		margin: 0 0 20px;
		font-size: 20px;
		color: #333;
		}
		.modal-content label {
		display: block;
		margin-bottom: 5px;
		font-weight: 500;
		color: #444;
		}
		.modal-content input,
		.modal-content select {
		width: 100%;
		padding: 8px;
		margin-bottom: 5px; /* Giảm khoảng cách giữa các input */
		border: 1px solid #ccc;
		border-radius: 4px;
		font-size: 14px;
		transition: border-color 0.3s;
		}
		.modal-content input:focus,
		.modal-content select:focus {
		border-color: #007bff;
		outline: none;
		}
		.modal-content input[readonly] {
		background-color: #f8f8f8;
		cursor: not-allowed;
		}
		.modal-content button {
		padding: 10px 20px;
		border: none;
		border-radius: 4px;
		cursor: pointer;
		font-size: 14px;
		transition: background-color 0.3s;
		}
		.modal-content button[type="submit"] {
		background-color: #007bff;
		color: white;
		}
		.modal-content button[type="submit"]:hover {
		background-color: #0056b3;
		}
		.modal-content button[type="button"] {
		background-color: #6c757d;
		color: white;
		}
		.modal-content button[type="button"]:hover {
		background-color: #5a6268;
		}
		.close-btn {
		float: right;
		cursor: pointer;
		font-size: 24px;
		color: #555;
		transition: color 0.3s;
		}
		.close-btn:hover {
		color: #000;
		}

		/* Tách form thành 2 cột và giới hạn chiều cao */
		#pop-up-form {
		max-height: 60vh; /* Giới hạn chiều cao của form */
		overflow-y: auto; /* Thêm thanh cuộn nếu nội dung vượt quá */
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
		}
		.form-column {
		flex: 1;
		min-width: 250px; /* Đảm bảo cột không quá hẹp trên màn hình nhỏ */
		}

		.delete-btn {
			background-color: #dc3545;
		}

		/* Responsive */
		@media (max-width: 768px) {
		.table-container {
			padding: 0 10px;
		}
		table {
			font-size: 12px;
		}
		th, td {
			padding: 8px;
		}
		.modal-content {
			width: 90%;
			padding: 15px;
		}
		.form-column {
			min-width: 100%; /* Trên màn hình nhỏ, form trở về 1 cột */
		}
		}
	</style>
</head>
<body>
	<%- include('../navbar') %>
	<div class="table-container">
		<h2>Danh sách Giáo Viên</h2>
		<button class="add-btn" onclick="openModalCreate()">Thêm giáo viên</button>
		<table border="1">
		<thead>
			<tr>
			<th>Mã</th>
			<th>Tên</th>
			<th>Ngày sinh</th>
			<th>Giới tính</th>
			<th>SĐT</th>
			<th>Mail</th>
			<th>Địa chỉ</th>
			<th>Tổ bộ môn</th>
			<th>Hành động</th>
			</tr>
		</thead>
		<tbody id="tableBody">
			<% giaoviens.forEach(giaovien => { %>
			<tr>
				<td><%= giaovien.GV_Ma %></td>
				<td><%= giaovien.GV_HoTen %></td>
				<td><%= giaovien.GV_NgaySinh %></td>
				<td><%= giaovien.GV_GioiTinh %></td>
				<td><%= giaovien.GV_SoDT %></td>
				<td><%= giaovien.GV_Mail %></td>
				<td><%= giaovien.GV_DiaChi %></td>
				<td><%= giaovien.TBM_Ma %></td>
				<td>
				<button class="update-btn" onclick="openModalEdit('<%= giaovien.GV_Ma %>', '<%= giaovien.GV_HoTen %>', '<%= giaovien.GV_NgaySinh %>', '<%= giaovien.GV_GioiTinh %>', '<%= giaovien.GV_SoDT %>', '<%= giaovien.GV_Mail %>', '<%= giaovien.GV_DiaChi %>', '<%= giaovien.TBM_Ma %>')">Sửa</button>
				<button class="delete-btn" onclick="deleteObject('<%= giaovien.GV_Ma %>')" >Xoá</button>
				</td>
			</tr>
			<% }) %>
		</tbody>
		</table>
	</div>

	<div id="pop-up-modal" class="modal">
		<div class="modal-content">
		<span class="close-btn" onclick="closeModal()">×</span>
		<h2>Chỉnh sửa giáo viên</h2>
		<form id="pop-up-form">
			<div class="form-column">
				<label for="ma">Mã giáo viên:</label>
				<input type="text" id="ma" name="GV_Ma" readonly>
				<label for="ten">Tên giáo viên:</label>
				<input type="text" id="ten" name="GV_HoTen" required>
				<label for="ngaysinh">Ngày sinh:</label>
				<input type="date" id="ngaysinh" name="GV_NgaySinh" required>
				<label for="gioitinh">Giới tính:</label>
				<select id="gioitinh" name="GV_GioiTinh" required>
					<option value="0">Nam</option>
					<option value="1">Nữ</option>
				</select>
			</div>
			<div class="form-column">
				<label for="sdt">SĐT:</label>
				<input type="text" id="sdt" name="GV_SoDT" required>
				<label for="mail">Mail:</label>
				<input type="email" id="mail" name="GV_Mail" required>
				<label for="diachi">Địa chỉ:</label>
				<input type="text" id="diachi" name="GV_DiaChi" required>
				<label for="tbm">Tổ bộ môn:</label>
				<select id="tbm" name="TBM_Ma">
					<% tobomons.forEach(tobomon => { %>
						<option value="<%= tobomon.TBM_Ma %>"><%= tobomon.TBM_Ten %></option>
					<% }) %>
				</select>
			</div>
			<div style="width: 100%; margin-top: 10px;">
				<button id="submitBtn" type="submit">Lưu</button>
				<button type="button" onclick="closeModal()">Hủy</button>
			</div>
		</form>
		</div>
	</div>

	<script>
		function openModalEdit(ma, ten, ngaysinh, gioitinh, soDT, mail, diachi, tbm) {
			const modal = document.getElementById('pop-up-modal');
			const form = document.getElementById('pop-up-form');
			const submitBtn = document.getElementById('submitBtn');
			submitBtn.onclick = async (event) => {
				event.preventDefault();
				await submitEditForm(form);
			};
			
			if (!modal || !form) {
				console.error('Modal or form not found');
				return;
			}
			form.action = `/giao-vien/${ma}`;
			form.method = 'PUT';
			form.reset();
			form.querySelector('#ma').value = ma;
			form.querySelector('#ten').value = ten;
			form.querySelector('#ngaysinh').value = ngaysinh;
			form.querySelector('#gioitinh').value = gioitinh;
			form.querySelector('#sdt').value = soDT;
			form.querySelector('#mail').value = mail;
			form.querySelector('#diachi').value = diachi;
			form.querySelector('#tbm').value = tbm;
			modal.style.display = 'flex';
			modal.classList.add('show');
		}

		async function submitEditForm(form) {
			if (!form) {
				console.error('Form not found');
				return;
			}

			const formData = new FormData(form);
			const data = Object.fromEntries(formData);
			
			try {
				const response = await fetch(form.action, {
					method: 'PUT',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				});

				if (!response.ok) {
					throw new Error('Lỗi khi cập nhật');
				}

				const result = await response.json();
				if (response.ok && result.message === 'Cập nhật giáo viên thành công') {
					console.log('Cập nhật thành công:', result);
					alert('Cập nhật thành công!');
					closeModal();
					window.location.reload();
				}
				
				
			} catch (error) {
				console.error('Error:', error);
				alert('Đã có lỗi xảy ra!');
			}
		}

		async function openModalCreate() {
			const modal = document.getElementById('pop-up-modal');
			const form = document.getElementById('pop-up-form');
			const submitBtn = document.getElementById('submitBtn');
			submitBtn.onclick = async (event) => {
				event.preventDefault();
				await submitCreateForm(form);
			};

			if (!modal || !form) {
				console.error('Modal or form not found');
				return;
			}
			const newGVID = await getNewGVID();
			console.log('New GVID:', newGVID);
			form.action = '/giao-vien';
			form.method = 'POST';
			form.reset(); 
			form.querySelector('#ma').value = newGVID;
			modal.style.display = 'flex';
			modal.classList.add('show');
		}

		async function getNewGVID() {
			try{
				const response = await fetch('/giao-vien-new-id', {
					method: 'GET',
					headers: {
						'Content-Type': 'application/json'
					}
				});
				const newGVID = await response.json();
				console.log(newGVID);
				return newGVID;
			}
			catch (error) {
				console.error('Error fetching new GVID:', error);
				return null;
			}
		}

		async function submitCreateForm(form) {
			if (!form) {
				console.error('Form not found');
				return;
			}

			const formData = new FormData(form);
			const data = Object.fromEntries(formData);

			try {
				const response = await fetch(form.action, {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json'
					},
					body: JSON.stringify(data)
				});

				if (!response.ok) {
					throw new Error('Lỗi khi tạo mới');
				}

				const result = await response.json();
				if (response.ok && result.message === 'Thêm giáo viên thành công') {
					console.log('Thêm thành công:', result);
					alert('Thêm thành công!');
					closeModal();
					window.location.reload();
				}
				
			} catch (error) {
				console.error('Error:', error);
				alert('Đã có lỗi xảy ra!');
			}
		}

		function closeModal() {
			const modal = document.getElementById('pop-up-modal');
			if (modal) {
				modal.classList.remove('show');
				setTimeout(() => {
					modal.style.display = 'none';
				}, 300);
			}
		}

		document.getElementById('pop-up-modal').onclick = function(event) {
			if (event.target === this) {
				closeModal();
			}
		};

		async function deleteObject(ma) {
			if (confirm('Bạn có chắc chắn muốn xóa giáo viên này?')) {
				try {
					const response = await fetch('/giao-vien/${ma}', {
						method: 'DELETE',
						headers: {'Content-Type': 'application/json'},
						body: JSON.stringify({ GV_Ma: ma })
					});

					if (!response.ok) {
						throw new Error('Lỗi khi xoá');
					}

					const result = await response.json();
					if (response.ok && result.message === 'Xoá giáo viên thành công') {
						console.log('Xoá thành công:', result);
						alert('Xoá thành công!');
						window.location.reload();
					}
					
				} catch (error) {
					console.error('Error:', error);
					alert('Đã có lỗi xảy ra!');
				}
			}
		}
	</script>
</body>
</html>